tibble::as_tibble(.)
return(t_df)
}
# function beneficiary summaries
sum_ben <- function(df, column_var){
column_var <- enquo(column_var)
df %>%
group_by(!!column_var) %>% # must add bang-bang
summarise(beneficiaries = sum(new_beneficiaries, na.rm = TRUE)) %>%
arrange(desc(beneficiaries))
}
# function beneficiary summaries, 2 grouped variables
sum_ben2 <- function(df, column_var1, column_var2){
column_var1 <- enquo(column_var1)
column_var2 <- enquo(column_var2)
df %>%
group_by(!!column_var1, !!column_var2) %>% # must add bang-bang
summarise(beneficiaries = sum(new_beneficiaries, na.rm = TRUE), .groups = "drop")
}
# scaling functions
range01 <- function(x){(x-min(x))/(max(x)-min(x))}
range_wna <- function(x){(x-min(x, na.rm = TRUE))/(max(x, na.rm = TRUE)-min(x, na.rm = TRUE))}
#mode function
mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
pcode4 <- read_excel("2022_FSCMYA_5W_template.xlsx",
sheet = "GEOADMINS") %>%
clean_names() %>%
select(admin1pcode_9:admin1_3) %>%
rename(admin1_pcode = admin1pcode_9,
state = state_10,
township = township_11,
admin3_pcode = admin3pcode_12,
vt_town = vt_and_town_13,
admin4_pcode = vt_and_town_pcode_14) %>%
filter(!is.na(admin4_pcode))
villages <- read_excel("2022_FSCMYA_5W_template.xlsx",
sheet = "GEOADMINS") %>%
clean_names() %>%
select(admin1pcode_17:location_type) %>%
rename(admin1_pcode = admin1pcode_17,
state = state_18,
township = township_19,
admin3_pcode = admin3pcode_20,
vt_town = vt_and_town_21,
admin4_pcode = vt_and_town_pcode_22) %>%
filter(!is.na(location))
camps <- read_excel("2022_FSCMYA_5W_template.xlsx",
sheet = "GEOADMINS") %>%
clean_names() %>%
select(township = township_29, camp_name, pcode_camp = p_code_camp) %>%
filter(!is.na(camp_name))
industrial_zones <- read_excel("2022_FSCMYA_5W_template.xlsx",
sheet = "GEOADMINS") %>%
clean_names() %>%
select(state = state_36, admin1_pcode = admin1pcode_37, industrial_zone = industrial_zones) %>%
filter(!is.na(industrial_zone))
fsc <- read_csv("fsc_codes.csv") %>%
rename_all(~str_replace_all(., "^number_of_", "")) %>%
rename_all(~str_replace_all(., "^number_", "")) %>%
rename(specify_location = specify_location_if_the_the_location_is_not_in_the_list) %>%
mutate(idp_camp_site_name= as.character(idp_camp_site_name)) %>%
mutate(location = case_when(!is.na(idp_camp_site_name) ~ idp_camp_site_name,
!is.na(village_ward) ~ village_ward,
!is.na(specify_location) ~ specify_location,
!is.na(village_tract_town) ~ village_tract_town)) %>%
mutate(date = my(month_of_implementation)) %>%
rename(activity = fsc_main_activity) %>%
mutate(township = recode(township, "Putao" = "Puta-O"),
admin3_pcode = ifelse(township == "Puta-O", "MMR001014", admin3_pcode)) %>%
left_join(pcode4 %>% select(township, vt_town, admin3_pcode, admin4_pcode, admin1_pcode), by =
c("village_tract_town" = "vt_town", "township" = "township",
"admin3_pcode" = "admin3_pcode", "admin1_pcode" = "admin1_pcode")) %>%
mutate(total_value_usd = case_when(currency == "MMK" ~ total_value / 1776,
currency == "USD" ~ total_value)) %>%
rename(state = state_region) %>%
mutate(admin3_pcode_old = case_when(admin3_pcode %in% c("MMR013046", "MMR013047") ~ "MMR013008",
admin3_pcode == "MMR015202" ~ "MMR015022",
admin3_pcode == "MMR015315" ~ "MMR015010",
admin3_pcode == "MMR015312" ~ "MMR015006",
admin3_pcode == "MMR015308" ~ "MMR015007",
admin3_pcode == "MMR016321" ~ "MMR016003",
TRUE ~ admin3_pcode)) %>%
# removing a duplicate entry from the left join
mutate(drop = case_when(admin4_pcode == "MMR007008058" ~ 1, TRUE ~ 0)) %>%
filter(drop != 1) %>% select(-drop) %>%
rename(response_plan = response_plan_if_project_under_fts,
beneficiaries = reached_beneficiaries,
households = reached_households) %>%
replace_na(list(new_beneficiaries = 0)) %>%
mutate(activity_red = case_when(activity %in% c("food distributions (in kind/voucher/cash), moderate",
"food distributions (in kind/voucher/cash), severe") ~
"food distribution",
activity %in% c("multi-purpose cash transfer (MPC), moderate",
"multi-purpose cash transfer (MPC), severe") ~
"multi-purpose cash transfer",
activity == "livelihoods vocational training" ~ "vocational training",
activity == "food/cash for work/assets" ~ "food_cash for work_assets",
activity == "income-generating activities and small grants" ~ "IGA and small grants",
TRUE ~ activity),
activity_red = str_remove_all(activity_red, "provision of ")) %>%
mutate(strat_obj = case_when(activity_red %in% c("food distribution", "multi-purpose cash transfer") &
beneficiary_type == "Internally Displaced" ~
"so_1",
activity_red %in% c("food distribution", "multi-purpose cash transfer") &
beneficiary_type != "Internally Displaced" ~
"so_2",
TRUE ~ "so_3")) %>%
# these partners did not provide the numbers of households
mutate(households = ifelse(is.na(households), beneficiaries, households)) %>%
mutate(usd_per_hhd = total_value_usd / households,
usd_per_person = total_value_usd / beneficiaries) %>%
mutate(usd_hhd_bin = case_when(usd_per_hhd < 10 ~ "<$10",
usd_per_hhd >= 10 & usd_per_hhd < 20 ~ ">=$10_<$20",
usd_per_hhd >= 20 & usd_per_hhd < 30 ~ ">=$20_<$30",
usd_per_hhd >= 30 & usd_per_hhd < 40 ~ ">=$30_<$40",
usd_per_hhd >= 40 & usd_per_hhd < 50 ~ ">=$40_<$50",
usd_per_hhd >= 50 & usd_per_hhd < 60 ~ ">=$50_<$60",
usd_per_hhd >= 60 & usd_per_hhd < 70 ~ ">=$60_<$70",
usd_per_hhd >= 70 & usd_per_hhd < 80 ~ ">=$70_<$80",
usd_per_hhd >= 80 & usd_per_hhd < 90 ~ ">=$80_<$90",
usd_per_hhd >= 90 & usd_per_hhd < 100 ~ ">=$90_<$100",
usd_per_hhd >= 100 ~ ">=$100",
TRUE ~ NA_character_),
usd_hhd_bin = fct_relevel(usd_hhd_bin, c("<$10", ">=$10_<$20", ">=$20_<$30", ">=$30_<$40", ">=$40_<$50",">=$50_<$60",
">=$60_<$70", ">=$70_<$80", ">=$80_<$90",">=$90_<$100",">=$100"))) %>%
mutate(usd_person_bin = case_when(usd_per_person < 2 ~ "<$2",
usd_per_person >= 2 & usd_per_person < 4 ~ ">=$2_<$4",
usd_per_person >= 4 & usd_per_person < 6 ~ ">=$4_<$6",
usd_per_person >= 6 & usd_per_person < 8 ~ ">=$6_<$8",
usd_per_person >= 8 & usd_per_person < 10 ~ ">=$8_<$10",
usd_per_person >= 10 & usd_per_person < 12 ~ ">=$10_<$12",
usd_per_person >= 12 & usd_per_person < 14 ~ ">=$12_<$14",
usd_per_person >= 14 & usd_per_person < 16 ~ ">=$14_<$16",
usd_per_person >= 16 & usd_per_person < 18 ~ ">=$16_<$18",
usd_per_person >= 18 & usd_per_person < 20 ~ ">=$18_<$20",
usd_per_person >= 20 ~ ">=$20",
TRUE ~ NA_character_),
usd_person_bin = fct_relevel(usd_person_bin, c("<$2", ">=$2_<$4", ">=$4_<$6", ">=$6_<$8", ">=$8_<$10",">=$10_<$12",
">=$12_<$14", ">=$14_<$16", ">=$16_<$18", ">=$18_<$20",">=20"))) %>%
mutate(location_type = recode(location_type, "village" = "Village")) %>%
# adding in the hubs
mutate(hub = case_when(state %in% c("Ayeyarwady", "Bago (West)", "Bago (East)", "Mandalay", "Nay Pyi Taw", "Yangon") ~
"central",
state %in% c("Kachin", "Shan (East)", "Shan (South)", "Shan (North)") ~
"northeast",
state %in% c("Chin", "Magway", "Rakhine", "Sagaing") ~
"northwest",
state %in% c("Kayah", "Kayin", "Mon", "Tanintharyi") ~
"southeast"))
pin <- read_csv("fs_pin.csv") %>%
select(-admin1_pcode) %>%
left_join(pcode4 %>% distinct(admin1_pcode, state), by = "state")
fsc_2021 <- read_csv("fsc5w_2021.csv") %>%
mutate(activity_new =
case_when(str_detect(activity_description, "Local Chicken support") ~
"provision of livestock kits",
activity == "Cash for Work / Food for Assets" ~
"food/cash for work/assets",
str_detect(activity_description, "home|Home") &
!str_detect(activity_description, "training|Training|Training,") ~
"provision of kitchen garden kits",
activity == "Provide crops & vegetables kits" &
str_detect(activity_description, "pumps|till|drum|Tiller|Drum") ~
"provision of community infrastructure and equipment",
activity == "Provide crops & vegetables kits" ~
"provision of crop, vegetable and seed kits",
activity == "Provide fishery kits" ~
"provision of fishery kits",
activity == "Provide livestock kits" ~
"provision of livestock kits",
activity %in% c("Provide monthly cash-based transfers", "Provide monthly food baskets") &
str_detect(activity_description, "Lifesaving|lifesaving|acute|Acute") ~
"food distributions (in kind/voucher/cash), severe",
# what to do about MVC, malnourished children and PLW?
activity %in% c("Provide monthly cash-based transfers", "Provide monthly food baskets")  ~
"food distributions (in kind/voucher/cash), moderate",
activity == "Provide support for income generation" &
!str_detect(activity_description, "agriculture input|farming") ~
"income-generating activities and small grants",
activity  == "Provide support for income generation"  ~
"income-generating activities and small grants",
activity == "Provide technical training" & str_detect(activity_description,
"farm|Farm|FFS|pesticide|ferti|agri|Agri|gardening|Seed|seed|SSA") ~
"FFS and farmer training",
activity == "Provide technical training" ~ "vocational training",
activity_description %in% c("Provide Voucher Cards to buy agriculture inputs for their agricultural works",
"Cash for farming (Livestock and Agri)") ~
"provision of crop, vegetable and seed kits",
TRUE ~ NA_character_)) %>%
mutate(activity_red = case_when(activity_new %in% c("food distributions (in kind/voucher/cash), moderate",
"food distributions (in kind/voucher/cash), severe") ~
"food distribution",
activity_new %in% c("multi-purpose cash transfer (MPC), moderate",
"multi-purpose cash transfer (MPC), severe") ~
"multi-purpose cash transfer",
activity == "livelihoods vocational training" ~ "vocational training",
activity == "food/cash for work/assets" ~ "food_cash for work_assets",
activity == "income-generating activities and small grants" ~ "IGA and small grants",
TRUE ~ activity_new)) %>%
mutate(strat_obj = case_when(activity_red %in% c("food distribution", "multi-purpose cash transfer") &
beneficiary_type == "Internally Displaced" ~
"so_1",
activity_red %in% c("food distribution", "multi-purpose cash transfer") &
beneficiary_type != "Internally Displaced" ~
"so_2",
TRUE ~ "so_3")) %>%
mutate(activity_red = recode(activity_red,
"food/cash for work/assets" = "food_cash for work_assets",
"provision of crop, vegetable and seed kits" = "crop, vegetable and seed kits",
"provision of livestock kits" = "livestock kits",
"income-generating activities and small grants" = "IGA and small grants"),
activity_red = str_remove_all(activity_red, "provision of ")) %>%
mutate(usd_per_hhd = total_value_usd / households,
usd_per_person = total_value_usd / beneficiaries) %>%
mutate(usd_hhd_bin = case_when(new_value_hhd < 10 ~ "<$10",
new_value_hhd >= 10 & new_value_hhd < 20 ~ ">=$10_<$20",
new_value_hhd >= 20 & new_value_hhd < 30 ~ ">=$20_<$30",
new_value_hhd >= 30 & new_value_hhd < 40 ~ ">=$30_<$40",
new_value_hhd >= 40 & new_value_hhd < 50 ~ ">=$40_<$50",
new_value_hhd >= 50 & new_value_hhd < 60 ~ ">=$50_<$60",
new_value_hhd >= 60 & new_value_hhd < 70 ~ ">=$60_<$70",
new_value_hhd >= 70 & new_value_hhd < 80 ~ ">=$70_<$80",
new_value_hhd >= 80 & new_value_hhd < 90 ~ ">=$80_<$90",
new_value_hhd >= 90 & new_value_hhd < 100 ~ ">=$90_<$100",
new_value_hhd >= 100 ~ ">=$100",
TRUE ~ NA_character_),
usd_hhd_bin = fct_relevel(usd_hhd_bin, c("<$10", ">=$10_<$20", ">=$20_<$30", ">=$30_<$40", ">=$40_<$50",">=$50_<$60",
">=$60_<$70", ">=$70_<$80", ">=$80_<$90",">=$90_<$100",">=$100"))) %>%
mutate(usd_person_bin = case_when(new_value_person < 2 ~ "<$2",
new_value_person >= 2 & new_value_person < 4 ~ ">=$2_<$4",
new_value_person >= 4 & new_value_person < 6 ~ ">=$4_<$6",
new_value_person >= 6 & new_value_person < 8 ~ ">=$6_<$8",
new_value_person >= 8 & new_value_person < 10 ~ ">=$8_<$10",
new_value_person >= 10 & new_value_person < 12 ~ ">=$10_<$12",
new_value_person >= 12 & new_value_person < 14 ~ ">=$12_<$14",
new_value_person >= 14 & new_value_person < 16 ~ ">=$14_<$16",
new_value_person >= 16 & new_value_person < 18 ~ ">=$16_<$18",
new_value_person >= 18 & new_value_person < 20 ~ ">=$18_<$20",
new_value_person >= 20 ~ ">=$20",
TRUE ~ NA_character_),
usd_person_bin = fct_relevel(usd_person_bin, c("<$2", ">=$2_<$4", ">=$4_<$6", ">=$6_<$8", ">=$8_<$10",">=$10_<$12",
">=$12_<$14", ">=$14_<$16", ">=$16_<$18", ">=$18_<$20",">=20"))) %>%
# adding in the hubs
mutate(hub = case_when(state %in% c("Ayeyarwady", "Bago (West)", "Bago (East)", "Mandalay", "Nay Pyi Taw", "Yangon") ~
"central",
state %in% c("Kachin", "Shan (East)", "Shan (South)", "Shan (North)") ~
"northeast",
state %in% c("Chin", "Magway", "Rakhine", "Sagaing") ~
"northwest",
state %in% c("Kayah", "Kayin", "Mon", "Tanintharyi") ~
"southeast"))
# shapefiles
pcode3_shape <- st_read("./mmr_polbnda_adm3_mimu_250k/mmr_polbnda_adm3_mimu_250k.shp", quiet = TRUE) %>%
rename(state = ST,
admin1_pcode = ST_PCODE,
township = TS,
admin3_pcode = TS_PCODE) %>%
mutate(admin3_pcode = ifelse(str_detect(township, "Hlaingtharya"), "MMR013008", admin3_pcode))
fsc_nw <- fsc %>% filter(hub == "northwest")
fsc_2021_nw <- fsc_2021 %>%  filter(hub == "northwest")
fsc %>%
mutate(strat_obj = str_to_upper(strat_obj)) %>%
mutate(was_nutrition_mainstreamed_in_activity = ifelse(is.na(was_nutrition_mainstreamed_in_activity),
"No", was_nutrition_mainstreamed_in_activity),
was_nutrition_mainstreamed_in_activity = fct_relevel(was_nutrition_mainstreamed_in_activity, levels = c("Yes", "No"))) %>%
sum_ben2(strat_obj, was_nutrition_mainstreamed_in_activity) %>%
pivot_wider(names_from = strat_obj, values_from = beneficiaries) %>%
mutate(total_beneficiaries = SO_1 + SO_2 + SO_3,
`%_beneficiaries` = round(total_beneficiaries / sum(total_beneficiaries) * 100, digits = 2)) %>%
pander(caption = "Breakdown of beneficiaries by status of nutrition mainstreaming")
fsc_nw %>%
filter(!is.na(usd_per_person)) %>%
filter(activity_red == "food distribution" & usd_per_person < 60) %>%
ggplot(aes(x = usd_per_person, y = state, colour = state,
text = paste0(org_code, "\n",
activity_red, "\n",
"ben. frequencies: ", comma(beneficiaries, accuracy = 1), "\n",
"USD per person: ", dollar(usd_per_person), "\n",
"total value: ", dollar(total_value_usd, accuracy = 1), "\n",
township, ", ", state))) +
geom_vline(xintercept = 11.455, lty = 2, colour = "red", alpha = .5, size = .3) +
geom_jitter(alpha = 0.3, aes(size = beneficiaries)) +
scale_colour_viridis_d() +
scale_size_continuous(range = c(0.3, 10)) +
scale_x_continuous(breaks = seq(0, 90, by = 10), labels = dollar_format(accuracy = 1)) +
labs(x = "USD value per person",
y = "",
title = "Food distribution: range of USD values per person by state in 2022/Q1",
size = "", colour = "")
# to determine how many beneficaries were copy/pasted
fsc_disagg %>%
filter(new_beneficiaries > 0) %>%
mutate(pc_disagg = ben_sub / beneficiaries) %>%
group_by(org_code, disagg) %>%
summarise(mean = mean(pc_disagg),
sd = sd(pc_disagg, na.rm = TRUE),
ben_sub = sum(ben_sub, na.rm = TRUE)) %>%
mutate(cat = ifelse(sd >= .05, "real", "fake")) %>%
group_by(cat) %>%
summarise(ben_sub = sum(ben_sub)) %>%
mutate(pc = ben_sub / sum(ben_sub))
fsc_nw %>%
filter(org_code %in% partner_top) %>%
select(date, org_code, beneficiaries = new_beneficiaries, location, admin3_pcode) %>%
rbind(fsc_2021 %>%
filter(unique_beneficiaries == "Yes") %>%
filter(org_code %in% partner_top) %>%
select(date, org_code, beneficiaries, location, admin3_pcode)) %>%
group_by(location, admin3_pcode) %>%
slice(which.max(beneficiaries)) %>%
group_by(org_code) %>%
arrange(date) %>%
mutate(cum_ben = cumsum(beneficiaries)) %>%
ggplot(aes(x = date, y = cum_ben, group = org_code)) +
# again, it's difficult to use the lines here
geom_col() +
scale_x_date(date_breaks = "1 month", date_labels = "%b") +
scale_y_continuous(labels = comma) +
geom_vline(colour = "red", lty = 2, xintercept = as.numeric(as.Date("2021-06-01")), alpha = .5) +
geom_vline(colour = "red", lty = 2, xintercept = as.numeric(as.Date("2022-01-01")), alpha = .5) +
facet_wrap(~ fct_rev(fct_reorder(org_code, cum_ben, max)), scales = "free_y") +
theme(legend.position = "none",
axis.text.x = element_text(size = 3.5, angle = 60),
axis.text.y = element_text(size = 4),
strip.text = element_text(size = 4.5, face = "bold")) + # see if this works when you knit, then do it for the other plots
labs(x = "Month",
y = "Cumulative beneficiaries",
title = "Monthly progress of top 9 implementing partners, 2021-2022/Q1",
subtitle = "Figures show cumulative unique beneficiaries") +
theme(plot.title = element_text(size = 11))
fsc_nw %>%
filter(org_code %in% partner_top) %>%
select(date, org_code, beneficiaries = new_beneficiaries, location, admin3_pcode) %>%
rbind(fsc_2021 %>%
filter(unique_beneficiaries == "Yes") %>%
filter(org_code %in% partner_top) %>%
select(date, org_code, beneficiaries, location, admin3_pcode)) %>%
group_by(location, admin3_pcode) %>%
slice(which.max(beneficiaries)) %>%
group_by(org_code) %>%
arrange(date) %>%
mutate(cum_ben = cumsum(beneficiaries)) %>%
ggplot(aes(x = date, y = cum_ben, group = org_code)) +
# again, it's difficult to use the lines here
geom_col() +
scale_x_date(date_breaks = "1 month", date_labels = "%b") +
scale_y_continuous(labels = comma) +
geom_vline(colour = "red", lty = 2, xintercept = as.numeric(as.Date("2021-06-01")), alpha = .5) +
geom_vline(colour = "red", lty = 2, xintercept = as.numeric(as.Date("2022-01-01")), alpha = .5) +
facet_wrap(~ org_code, scales = "free_y") +
theme(legend.position = "none",
axis.text.x = element_text(size = 3.5, angle = 60),
axis.text.y = element_text(size = 4),
strip.text = element_text(size = 4.5, face = "bold")) + # see if this works when you knit, then do it for the other plots
labs(x = "Month",
y = "Cumulative beneficiaries",
title = "Monthly progress of top 9 implementing partners, 2021-2022/Q1",
subtitle = "Figures show cumulative unique beneficiaries") +
theme(plot.title = element_text(size = 11))
fsc_nw %>%
filter(org_code %in% partner_top) %>%
select(date, org_code, beneficiaries = new_beneficiaries, location, admin3_pcode) %>%
rbind(fsc_2021 %>%
filter(unique_beneficiaries == "Yes") %>%
filter(org_code %in% partner_top) %>%
select(date, org_code, beneficiaries, location, admin3_pcode)) %>%
group_by(location, admin3_pcode) %>%
slice(which.max(beneficiaries)) %>%
group_by(org_code) %>%
arrange(date) %>%
mutate(cum_ben = cumsum(beneficiaries)) %>%
ggplot(aes(x = date, y = cum_ben, fill = org_code)) +
# again, it's difficult to use the lines here
geom_col() +
scale_x_date(date_breaks = "1 month", date_labels = "%b") +
scale_y_continuous(labels = comma) +
geom_vline(colour = "red", lty = 2, xintercept = as.numeric(as.Date("2021-06-01")), alpha = .5) +
geom_vline(colour = "red", lty = 2, xintercept = as.numeric(as.Date("2022-01-01")), alpha = .5) +
facet_wrap(~ fct_rev(fct_reorder(org_code, cum_ben, max)), scales = "free_y") +
theme(legend.position = "none",
axis.text.x = element_text(size = 3.5, angle = 60),
axis.text.y = element_text(size = 4),
strip.text = element_text(size = 4.5, face = "bold")) + # see if this works when you knit, then do it for the other plots
labs(x = "Month",
y = "Cumulative beneficiaries",
title = "Monthly progress of top 9 implementing partners, 2021-2022/Q1",
subtitle = "Figures show cumulative unique beneficiaries") +
theme(plot.title = element_text(size = 11))
fsc_nw %>%
filter(org_code %in% partner_top) %>%
select(date, org_code, beneficiaries = new_beneficiaries, location, admin3_pcode) %>%
rbind(fsc_2021 %>%
filter(unique_beneficiaries == "Yes") %>%
filter(org_code %in% partner_top) %>%
select(date, org_code, beneficiaries, location, admin3_pcode)) %>%
group_by(location, admin3_pcode) %>%
slice(which.max(beneficiaries)) %>%
group_by(org_code) %>%
arrange(date) %>%
mutate(cum_ben = cumsum(beneficiaries)) %>%
ggplot(aes(x = date, y = cum_ben)) +
# again, it's difficult to use the lines here
geom_step() +
scale_x_date(date_breaks = "1 month", date_labels = "%b") +
scale_y_continuous(labels = comma) +
geom_vline(colour = "red", lty = 2, xintercept = as.numeric(as.Date("2021-06-01")), alpha = .5) +
geom_vline(colour = "red", lty = 2, xintercept = as.numeric(as.Date("2022-01-01")), alpha = .5) +
facet_wrap(~ fct_rev(fct_reorder(org_code, cum_ben, max)), scales = "free_y") +
theme(legend.position = "none",
axis.text.x = element_text(size = 3.5, angle = 60),
axis.text.y = element_text(size = 4),
strip.text = element_text(size = 4.5, face = "bold")) + # see if this works when you knit, then do it for the other plots
labs(x = "Month",
y = "Cumulative beneficiaries",
title = "Monthly progress of top 9 implementing partners, 2021-2022/Q1",
subtitle = "Figures show cumulative unique beneficiaries") +
theme(plot.title = element_text(size = 11))
food_dist_range <- fsc_nw %>%
filter(!is.na(usd_per_person)) %>%
filter(usd_per_person < 60) %>%
ggplot(aes(x = usd_per_person, y = state, colour = state,
text = paste0(org_code, "\n",
activity_red, "\n",
"ben. frequencies: ", comma(beneficiaries, accuracy = 1), "\n",
"USD per person: ", dollar(usd_per_person), "\n",
"total value: ", dollar(total_value_usd, accuracy = 1), "\n",
township, ", ", state))) +
geom_vline(xintercept = 11.455, lty = 2, colour = "red", alpha = .5, size = .3) +
geom_jitter(alpha = 0.3, aes(size = beneficiaries)) +
scale_colour_viridis_d() +
scale_size_continuous(range = c(0.3, 10)) +
scale_x_continuous(breaks = seq(0, 90, by = 10), labels = dollar_format(accuracy = 1)) +
labs(x = "USD value per person",
y = "",
title = "Food distribution: range of USD values per person by state in 2022/Q1",
size = "", colour = "") +
facet_wrap(~activity_red)
ggplotly(food_dist_range, tooltip = c("text"), width = 820, height =  600) %>%
layout(title = list(text = paste0("Food distribution: range of USD values per person by state in 2022/Q1",
"<br>",
"<sup>",
"The red line is 50% of 1/5 of food MEB; double-click on legend to select","</sup>")),
legend = list(font = list(size = 7)))
food_dist_range <- fsc_nw %>%
filter(!is.na(usd_per_person)) %>%
filter(usd_per_person < 60) %>%
ggplot(aes(x = usd_per_person, y = state, colour = state,
text = paste0(org_code, "\n",
activity_red, "\n",
"ben. frequencies: ", comma(beneficiaries, accuracy = 1), "\n",
"USD per person: ", dollar(usd_per_person), "\n",
"total value: ", dollar(total_value_usd, accuracy = 1), "\n",
township, ", ", state))) +
geom_vline(xintercept = 11.455, lty = 2, colour = "red", alpha = .5, size = .3) +
geom_jitter(alpha = 0.3, aes(size = beneficiaries)) +
scale_colour_viridis_d() +
scale_size_continuous(range = c(0.3, 10)) +
scale_x_continuous(breaks = seq(0, 90, by = 10), labels = dollar_format(accuracy = 1)) +
labs(x = "USD value per person",
y = "",
title = "Food distribution: range of USD values per person by state in 2022/Q1",
size = "", colour = "") +
facet_wrap(~activity_red, ncol = 1)
ggplotly(food_dist_range, tooltip = c("text"), width = 820, height =  600) %>%
layout(title = list(text = paste0("Food distribution: range of USD values per person by state in 2022/Q1",
"<br>",
"<sup>",
"The red line is 50% of 1/5 of food MEB; double-click on legend to select","</sup>")),
legend = list(font = list(size = 7)))
ggplotly(food_dist_range, tooltip = c("text"), width = 820, height =  700) %>%
layout(title = list(text = paste0("Food distribution: range of USD values per person by state in 2022/Q1",
"<br>",
"<sup>",
"The red line is 50% of 1/5 of food MEB; double-click on legend to select","</sup>")),
legend = list(font = list(size = 7)))
ggplotly(food_dist_range, tooltip = c("text"), width = 820, height =  700) %>%
layout(title = list(text = paste0("Food distribution: range of USD values per person by state in 2022/Q1",
"<br>",
"<sup>",
"The red line is 50% of 1/5 of food MEB; double-click on legend to select", "<br>", "</sup>")),
legend = list(font = list(size = 7)))
food_dist_range <- fsc_nw %>%
filter(!is.na(usd_per_person)) %>%
# filtering out outliers, you might want to filter out multi-purpose cash transfers also
# since there was only one distribution
filter(activity_red != "multi-purpose cash transfer" & usd_per_person < 60) %>%
ggplot(aes(x = usd_per_person, y = state, colour = state,
text = paste0(org_code, "\n",
activity_red, "\n",
"ben. frequencies: ", comma(beneficiaries, accuracy = 1), "\n",
"USD per person: ", dollar(usd_per_person), "\n",
"total value: ", dollar(total_value_usd, accuracy = 1), "\n",
township, ", ", state))) +
geom_vline(xintercept = 11.455, lty = 2, colour = "red", alpha = .5, size = .3) +
geom_jitter(alpha = 0.3, aes(size = beneficiaries)) +
scale_colour_viridis_d() +
scale_size_continuous(range = c(0.3, 10)) +
scale_x_continuous(breaks = seq(0, 90, by = 10), labels = dollar_format(accuracy = 1)) +
labs(x = "USD value per person",
y = "",
title = "Food distribution: range of USD values per person by state in 2022/Q1",
size = "", colour = "") +
facet_wrap(~activity_red, ncol = 1)
ggplotly(food_dist_range, tooltip = c("text"), width = 820, height =  700) %>%
layout(title = list(text = paste0("Food distribution: range of USD values per person by state in 2022/Q1",
"<br>",
"<sup>",
"The red line is 50% of 1/5 of food MEB; double-click on legend to select", "<br>", "</sup>")),
legend = list(font = list(size = 7)))
