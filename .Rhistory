"states: ", states, "\n",
"townships: ", townships, "\n",
"beneficiaries: ", comma(beneficiaries, accuracy = 1)))) +
geom_point(aes(size = beneficiaries), alpha = .7) +
scale_x_continuous(trans = "log", labels = comma, breaks = c(0, 100, 300, 1000, 3000, 10000, 30000, 100000, 300000)) +
scale_y_continuous(breaks = seq(0, 25, 5)) +
labs(x = "Number of beneficiaries",
y = "Number of townships",
title = "Plot of beneficiaries and townships reached, by implementing partner") +
theme(legend.position = "none")
ggplotly(partner_scatter, tooltip = c("text"), width = 820) %>%
config(displayModeBar = FALSE) %>%
layout(title = list(text = paste0("Plot of beneficiaries and townships reached, by implementing partner",
"<br>",
"<sup>",
"mouse over for details",
"</sup>")))
partner_scatter <- fsc_nw %>%
group_by(org_code) %>%
summarise(states = n_distinct(state),
townships = n_distinct(admin3_pcode),
beneficiaries = sum(new_beneficiaries)) %>%
ggplot(aes(x = beneficiaries, y = townships,
text = paste0(org_code, "\n",
"states: ", states, "\n",
"townships: ", townships, "\n",
"beneficiaries: ", comma(beneficiaries, accuracy = 1)))) +
geom_point(aes(size = beneficiaries), alpha = .7) +
scale_x_continuous(trans = "log", labels = comma, breaks = c(0, 100, 300, 1000, 3000, 10000, 30000, 100000, 300000)) +
scale_y_continuous() +
labs(x = "Number of beneficiaries",
y = "Number of townships",
title = "Plot of beneficiaries and townships reached, by implementing partner") +
theme(legend.position = "none")
ggplotly(partner_scatter, tooltip = c("text"), width = 820) %>%
config(displayModeBar = FALSE) %>%
layout(title = list(text = paste0("Plot of beneficiaries and townships reached, by implementing partner",
"<br>",
"<sup>",
"mouse over for details",
"</sup>")))
partner_top <- fsc_nw %>%
sum_ben(org_code) %>% arrange(desc(beneficiaries)) %>%  mutate(org_code = reorder(org_code, -beneficiaries)) %>% pull(org_code) %>% head(9)
fsc_nw %>%
filter(org_code %in% partner_top) %>%
select(date, org_code, beneficiaries = new_beneficiaries, location, admin3_pcode) %>%
rbind(fsc_2021 %>%
filter(unique_beneficiaries == "Yes") %>%
filter(org_code %in% partner_top) %>%
select(date, org_code, beneficiaries, location, admin3_pcode)) %>%
group_by(location, admin3_pcode) %>%
slice(which.max(beneficiaries)) %>%
group_by(org_code) %>%
arrange(date) %>%
mutate(cum_ben = cumsum(beneficiaries)) %>%
ggplot(aes(x = date, y = cum_ben)) +
# again, it's difficult to use the lines here
geom_step() +
scale_x_date(date_breaks = "1 month", date_labels = "%b") +
scale_y_continuous(labels = comma) +
geom_vline(colour = "red", lty = 2, xintercept = as.numeric(as.Date("2021-06-01")), alpha = .5) +
geom_vline(colour = "red", lty = 2, xintercept = as.numeric(as.Date("2022-01-01")), alpha = .5) +
facet_wrap(~ fct_rev(fct_reorder(org_code, cum_ben, max)), scales = "free_y") +
theme(legend.position = "none",
axis.text.x = element_text(size = 3.5, angle = 60),
axis.text.y = element_text(size = 4),
strip.text = element_text(size = 4.5, face = "bold")) + # see if this works when you knit, then do it for the other plots
labs(x = "Month",
y = "Cumulative beneficiaries",
title = "Monthly progress of top 9 implementing partners, 2021-2022/Q1",
subtitle = "Figures show cumulative unique beneficiaries") +
theme(plot.title = element_text(size = 11))
fsc_nw %>%
select(date, org_code, beneficiaries = new_beneficiaries, location, admin3_pcode) %>%
rbind(fsc_2021 %>%
filter(unique_beneficiaries == "Yes") %>%
select(date, org_code, beneficiaries, location, admin3_pcode)) %>%
group_by(location, admin3_pcode) %>%
slice(which.max(beneficiaries)) %>%
group_by(org_code, year = year(date)) %>%
summarise(beneficiaries = sum(beneficiaries)) %>%
pivot_wider(names_from = year, values_from = beneficiaries, names_prefix = "ben_") %>%
rowwise() %>%
mutate(total_ben = sum(ben_2021, ben_2022, na.rm = TRUE)) %>%
ungroup() %>%
mutate(rank_2021 = dense_rank(-ben_2021),
rank_2022 = dense_rank(-ben_2022)) %>%
arrange(desc(ben_2022)) %>%
select(org_code, ben_2021, rank_2021, ben_2022, rank_2022, total_ben) %>%
head(15) %>%
kable(caption = "Top implementing partners by beneficiaries reached in 2022/Q1", format.args = list(big.mark = ",")) %>%
kable_classic_2("striped")
fsc_nw %>%
group_by(donor) %>%
summarise(beneficiaries = sum(new_beneficiaries)) %>%
mutate(donor = ifelse(is.na(donor), "No donor specified", donor),
donor = ifelse(beneficiaries < 1000, "Other donors", donor)) %>%
group_by(donor) %>%
summarise(beneficiaries = sum(beneficiaries)) %>%
mutate(`%_beneficiaries` = round(beneficiaries / sum(beneficiaries) * 100, digits = 2)) %>%
arrange(desc(`%_beneficiaries`)) %>%
kable(caption = "Top donors by beneficiaries reached",
format.args = list(big.mark = ",")) %>%
kable_classic_2("striped", full_width = FALSE)
fsc_nw %>%
group_by(donor) %>%
summarise(beneficiaries = sum(new_beneficiaries)) %>%
mutate(donor = ifelse(is.na(donor), "No donor specified", donor),
# this is where you set the threshold for "other donors"
donor = ifelse(beneficiaries < 500, "Other donors", donor)) %>%
group_by(donor) %>%
summarise(beneficiaries = sum(beneficiaries)) %>%
mutate(`%_beneficiaries` = round(beneficiaries / sum(beneficiaries) * 100, digits = 2)) %>%
arrange(desc(`%_beneficiaries`)) %>%
kable(caption = "Top donors by beneficiaries reached",
format.args = list(big.mark = ",")) %>%
kable_classic_2("striped", full_width = FALSE)
ben_target <- fsc_nw %>%
group_by(admin3_pcode_old) %>%
summarise(beneficiaries = sum(new_beneficiaries),
partners = n_distinct(org_code)) %>%
left_join(pin, by = c("admin3_pcode_old" = "admin3_pcode")) %>%
mutate(reached_pc = beneficiaries / fs_targeted,
reached_pc = ifelse(is.infinite(reached_pc), 1, reached_pc),
fs_targeted = ifelse(fs_targeted == 0 & beneficiaries > 0, 1, fs_targeted),
fs_targeted = round(fs_targeted, digits = 0)) %>%
arrange(desc(reached_pc)) %>%
select(state, township, fs_pin, fs_targeted, beneficiaries, reached_pc, partners) %>%
ggplot(aes(x = fs_targeted, y = beneficiaries, colour = partners,
text = paste0(township, ",", "\n",
state, ",", "\n",
"beneficiaries: ", comma(beneficiaries, accuracy = 1), "\n",
"target: ", comma(fs_targeted, accuracy = 1), "\n",
"% of target: ", percent(reached_pc, accuracy = 2), "\n",
"partners: ", partners))) +
geom_abline(intercept = 0, slope = 1, lty = 2, colour = "red") +
geom_point(aes(size = beneficiaries), alpha = 0.8) +
scale_size_continuous(guide = "none") +
scale_x_continuous(trans = "log10", labels = comma) +
scale_y_continuous(trans = "log10", labels = comma) +
scale_colour_viridis(direction = -1) +
labs(x = "Targeted population", y = "Beneficiaries",
title = "Beneficiaries reached vs targeted population by township, Q1 2022",
subtitle = "The red line is 100% of target") +
theme(legend.title = element_text(size = 7))
ggplotly(ben_target, tooltip = c("text"), width = 820, height = 500) %>%
config(displayModeBar = FALSE) %>%
layout(title = list(text = paste0("Beneficiaries reached vs targeted population by township, Q1 2022",
"<br>",
"<sup>",
"The red line is 100% of target; size indicates number of beneficiaries","</sup>")),
legend = list(font = list(size = 7)))
fsc_nw %>%
group_by(admin3_pcode = admin3_pcode_old) %>%
summarise(beneficiaries = sum(beneficiaries)) %>%
# filtering the shapefile
right_join(pcode3_shape %>%
filter(state %in% c("Rakhine", "Chin", "Sagaing", "Magway")),
by = c("admin3_pcode")) %>%
st_as_sf() %>%
ggplot() +
geom_sf(aes(fill = beneficiaries), size = 0.1) +
scale_fill_viridis_c(direction = -1, trans = "log10",
breaks = c(100, 1000, 10000, 100000, 500000),
labels = comma) +
theme_void() +
theme(legend.text = element_text(size = 10),
legend.title = element_text(size = 10),
legend.key.size = unit(0.7, 'cm')) +
labs(title = "Beneficiaries by township",
subtitle = "townships in grey do not have any partners present",
fill = "Beneficiaries") +
pin %>%
# the filter needs to be applied
filter(state %in% c("Rakhine", "Chin", "Sagaing", "Magway")) %>%
#filtering the shapefile
right_join(pcode3_shape %>%
filter(state %in% c("Rakhine", "Chin", "Sagaing", "Magway")),
by = c("admin3_pcode")) %>%
st_as_sf() %>%
ggplot() +
geom_sf(aes(fill = fs_targeted), size = .1) +
scale_fill_viridis_c(direction = -1, trans = "log10",
breaks = c(100, 1000, 10000, 100000, 500000),
limits = range(57, 801760),
labels = comma) +
theme_void() +
theme(legend.text = element_text(size = 10),
legend.title = element_text(size = 10),
legend.key.size = unit(0.7, 'cm')) +
labs(title = "2022 target by township",
subtitle = "townships in grey do not food security targets",
fill = "target")
fsc_nw %>%
group_by(admin3_pcode_old) %>%
summarise(beneficiaries = sum(new_beneficiaries),
partners = n_distinct(org_code)) %>%
right_join(pin, by = c("admin3_pcode_old" = "admin3_pcode")) %>%
replace_na(list(beneficiaries = 0)) %>%
mutate(reached_pc = beneficiaries / fs_targeted,
reached_pc = ifelse(is.infinite(reached_pc), 1, reached_pc),
reached_pc = round(reached_pc * 100, digits = 2),
fs_targeted = round(fs_targeted, digits = 0),
overreach = beneficiaries - fs_targeted) %>%
arrange(desc(overreach)) %>%
select(state, township, target = fs_targeted, beneficiaries, overreach, `%_reached` = reached_pc, partners) %>%
datatable(options = list(pageLength = 15, scrollX = TRUE),
filter = list(position = "top", clear = FALSE),
caption = htmltools::tags$caption(style = 'caption-side: top;
text-align: center;
color:black; font-size:120% ;',
"Reference table -- townships")) %>%
formatRound(c("target", "beneficiaries", "overreach"), digits = 0) %>%
formatStyle(0, target = "row", lineHeight = "80%", fontSize = "80%")
fsc_nw %>%
group_by(admin3_pcode_old) %>%
summarise(beneficiaries = sum(new_beneficiaries),
partners = n_distinct(org_code)) %>%
right_join(pin, by = c("admin3_pcode_old" = "admin3_pcode")) %>%
replace_na(list(beneficiaries = 0)) %>%
mutate(reached_pc = beneficiaries / fs_targeted,
reached_pc = ifelse(is.infinite(reached_pc), 1, reached_pc),
reached_pc = round(reached_pc * 100, digits = 2),
fs_targeted = round(fs_targeted, digits = 0),
overreach = beneficiaries - fs_targeted) %>%
arrange(desc(beneficiaries)) %>%
select(state, township, target = fs_targeted, beneficiaries, overreach, `%_reached` = reached_pc, partners) %>%
datatable(options = list(pageLength = 15, scrollX = TRUE),
filter = list(position = "top", clear = FALSE),
caption = htmltools::tags$caption(style = 'caption-side: top;
text-align: center;
color:black; font-size:120% ;',
"Reference table -- townships")) %>%
formatRound(c("target", "beneficiaries", "overreach"), digits = 0) %>%
formatStyle(0, target = "row", lineHeight = "80%", fontSize = "80%")
fsc_nw %>%
group_by(admin3_pcode_old) %>%
summarise(beneficiaries = sum(new_beneficiaries),
partners = n_distinct(org_code)) %>%
right_join(pin, by = c("admin3_pcode_old" = "admin3_pcode")) %>%
replace_na(list(beneficiaries = 0)) %>%
mutate(reached_pc = beneficiaries / fs_targeted,
reached_pc = ifelse(is.infinite(reached_pc), 1, reached_pc),
reached_pc = round(reached_pc * 100, digits = 2),
fs_targeted = round(fs_targeted, digits = 0),
gap = fs_targeted - beneficiaries) %>%
arrange(gap) %>%
# arrange(desc(beneficiaries)) %>%
select(state, township, target = fs_targeted, beneficiaries, overreach, `%_reached` = reached_pc, partners) %>%
datatable(options = list(pageLength = 15, scrollX = TRUE),
filter = list(position = "top", clear = FALSE),
caption = htmltools::tags$caption(style = 'caption-side: top;
text-align: center;
color:black; font-size:120% ;',
"Reference table -- townships")) %>%
formatRound(c("target", "beneficiaries", "overreach"), digits = 0) %>%
formatStyle(0, target = "row", lineHeight = "80%", fontSize = "80%")
fsc_nw %>%
group_by(admin3_pcode_old) %>%
summarise(beneficiaries = sum(new_beneficiaries),
partners = n_distinct(org_code)) %>%
right_join(pin, by = c("admin3_pcode_old" = "admin3_pcode")) %>%
replace_na(list(beneficiaries = 0)) %>%
mutate(reached_pc = beneficiaries / fs_targeted,
reached_pc = ifelse(is.infinite(reached_pc), 1, reached_pc),
reached_pc = round(reached_pc * 100, digits = 2),
fs_targeted = round(fs_targeted, digits = 0),
gap = fs_targeted - beneficiaries) %>%
arrange(gap) %>%
# arrange(desc(beneficiaries)) %>%
select(state, township, target = fs_targeted, beneficiaries, gap, `%_reached` = reached_pc, partners) %>%
datatable(options = list(pageLength = 15, scrollX = TRUE),
filter = list(position = "top", clear = FALSE),
caption = htmltools::tags$caption(style = 'caption-side: top;
text-align: center;
color:black; font-size:120% ;',
"Reference table -- townships")) %>%
formatRound(c("target", "beneficiaries", "overreach"), digits = 0) %>%
formatStyle(0, target = "row", lineHeight = "80%", fontSize = "80%")
fsc_nw %>%
group_by(admin3_pcode_old) %>%
summarise(beneficiaries = sum(new_beneficiaries),
partners = n_distinct(org_code)) %>%
right_join(pin, by = c("admin3_pcode_old" = "admin3_pcode")) %>%
replace_na(list(beneficiaries = 0)) %>%
mutate(reached_pc = beneficiaries / fs_targeted,
reached_pc = ifelse(is.infinite(reached_pc), 1, reached_pc),
reached_pc = round(reached_pc * 100, digits = 2),
fs_targeted = round(fs_targeted, digits = 0),
gap = fs_targeted - beneficiaries) %>%
arrange(desc(beneficiaries)) %>%
select(state, township, target = fs_targeted, beneficiaries, overreach, `%_reached` = reached_pc, partners) %>%
datatable(options = list(pageLength = 15, scrollX = TRUE),
filter = list(position = "top", clear = FALSE),
caption = htmltools::tags$caption(style = 'caption-side: top;
text-align: center;
color:black; font-size:120% ;',
"Reference table -- townships")) %>%
formatRound(c("target", "beneficiaries", "overreach"), digits = 0) %>%
formatStyle(0, target = "row", lineHeight = "80%", fontSize = "80%")
fsc_nw %>%
group_by(admin3_pcode_old) %>%
summarise(beneficiaries = sum(new_beneficiaries),
partners = n_distinct(org_code)) %>%
right_join(pin, by = c("admin3_pcode_old" = "admin3_pcode")) %>%
replace_na(list(beneficiaries = 0)) %>%
mutate(reached_pc = beneficiaries / fs_targeted,
reached_pc = ifelse(is.infinite(reached_pc), 1, reached_pc),
reached_pc = round(reached_pc * 100, digits = 2),
fs_targeted = round(fs_targeted, digits = 0),
overreach = beneficiaries - fs_targeted) %>%
arrange(desc(beneficiaries)) %>%
select(state, township, target = fs_targeted, beneficiaries, overreach, `%_reached` = reached_pc, partners) %>%
datatable(options = list(pageLength = 15, scrollX = TRUE),
filter = list(position = "top", clear = FALSE),
caption = htmltools::tags$caption(style = 'caption-side: top;
text-align: center;
color:black; font-size:120% ;',
"Reference table -- townships")) %>%
formatRound(c("target", "beneficiaries", "overreach"), digits = 0) %>%
formatStyle(0, target = "row", lineHeight = "80%", fontSize = "80%")
pcode1_shape <- st_read("./mmr_polbnda2_adm1_mimu_250k/mmr_polbnda2_adm1_mimu_250k.shp", quiet = TRUE) %>%
rename(state = ST,
admin1_pcode = ST_PCODE) %>% st_as_sf()
fsc_nw %>%
group_by(admin3_pcode = admin3_pcode_old) %>%
summarise(beneficiaries = sum(beneficiaries)) %>%
# filtering the shapefile
right_join(pcode3_shape %>%
filter(state %in% c("Rakhine", "Chin", "Sagaing", "Magway")),
by = c("admin3_pcode")) %>%
st_as_sf() %>%
ggplot() +
geom_sf(aes(fill = beneficiaries), size = 0.1) +
geom_sf(data = pcode1_shape %>%  filter(state %in% c("Rakhine", "Chin", "Sagaing", "Magway")),
alpha = 0, colour = "black", size = 0.5) +
scale_fill_viridis_c(direction = -1, trans = "log10",
breaks = c(100, 1000, 10000, 100000, 500000),
labels = comma) +
theme_void() +
theme(legend.text = element_text(size = 10),
legend.title = element_text(size = 10),
legend.key.size = unit(0.7, 'cm')) +
labs(title = "Beneficiaries by township",
subtitle = "townships in grey do not have any partners present",
fill = "Beneficiaries") +
pin %>%
# the filter needs to be applied
filter(hub == "northwest") %>%
#filtering the shapefile
right_join(pcode3_shape %>%
filter(state %in% c("Rakhine", "Chin", "Sagaing", "Magway")),
by = c("admin3_pcode")) %>%
st_as_sf() %>%
ggplot() +
geom_sf(aes(fill = fs_targeted), size = .1) +
geom_sf(data = pcode1_shape %>%  filter(state %in% c("Rakhine", "Chin", "Sagaing", "Magway")),
alpha = 0, colour = "black", size = 0.5) +
scale_fill_viridis_c(direction = -1, trans = "log10",
breaks = c(100, 1000, 10000, 100000, 500000),
limits = range(57, 801760),
labels = comma) +
theme_void() +
theme(legend.text = element_text(size = 10),
legend.title = element_text(size = 10),
legend.key.size = unit(0.7, 'cm')) +
labs(title = "2022 target by township",
subtitle = "townships in grey do not food security targets",
fill = "target")
ggplotly(food_dist_range, tooltip = c("text"), width = 820, height =  700) %>%
layout(title = list(text = paste0("Range of USD values per person by state in 2022/Q1",
"<br>",
"<sup>",
"The red line is 50% of 1/5 of food MEB; double-click on legend to select", "<br>", "</sup>")),
title_y = 0,
legend = list(font = list(size = 7)))
ggplotly(food_dist_range, tooltip = c("text"), width = 820, height =  700) %>%
layout(title = list(text = paste0("Range of USD values per person by state in 2022/Q1",
"<br>",
"<sup>",
"The red line is 50% of 1/5 of food MEB; double-click on legend to select", "<br>", "</sup>"),
title_y = 0, title_x = 0,),
legend = list(font = list(size = 7)))
ggplotly(food_dist_range, tooltip = c("text"), width = 820, height =  700) %>%
layout(title = list(text = paste0("Range of USD values per person by state in 2022/Q1",
"<br>",
"<sup>",
"The red line is 50% of 1/5 of food MEB; double-click on legend to select", "<br>", "</sup>"),
title_y = 0, title_x = 0),
legend = list(font = list(size = 7)))
annotations =
xanchor='right', yanchor='auto', xshift=0, yshift=0,
font=list(size=8),
ggplotly(food_dist_range, tooltip = c("text"), width = 820, height =  700) %>%
layout(title = list(text = paste0("Range of USD values per person by state in 2022/Q1",
"<br>",
"<sup>",
"The red line is 50% of 1/5 of food MEB; double-click on legend to select", "<br>", "</sup>"),
margin = list(b=160), ##bottom margin in pixels
annotations =
list(x = 0.5, y = -0.75, #position of text adjust as needed
text = "The red line is 50% of 1/5 of food MEB; double-click on legend to select",
showarrow = F, xref='paper', yref='paper',
xanchor='right', yanchor='auto', xshift=0, yshift=0,
font=list(size=8)),
legend = list(font = list(size = 7))))
ggplotly(food_dist_range, tooltip = c("text"), width = 820, height =  700) %>%
layout(title = list(text = paste0("Range of USD values per person by state in 2022/Q1"),
margin = list(b=160), ##bottom margin in pixels
annotations =
list(x = 0.5, y = -0.75, #position of text adjust as needed
text = "The red line is 50% of 1/5 of food MEB; double-click on legend to select",
showarrow = F, xref='paper', yref='paper',
xanchor='right', yanchor='auto', xshift=0, yshift=0,
font=list(size=8)),
legend = list(font = list(size = 7))))
ggplotly(food_dist_range, tooltip = c("text"), width = 820, height =  700) %>%
layout(title = list(text = paste0("Range of USD values per person by state in 2022/Q1")),
margin = list(b=160), ##bottom margin in pixels
annotations = list(x = 0.5, y = -0.75, #position of text adjust as needed
text = "The red line is 50% of 1/5 of food MEB; double-click on legend to select",
showarrow = F, xref='paper', yref='paper',
xanchor='right', yanchor='auto', xshift=0, yshift=0,
font=list(size=8)),
legend = list(font = list(size = 7))))
ggplotly(food_dist_range, tooltip = c("text"), width = 820, height =  700) %>%
layout(title = list(text = paste0("Range of USD values per person by state in 2022/Q1")),
margin = list(b=160), ##bottom margin in pixels
annotations = list(x = 0.5, y = -0.75, #position of text adjust as needed
text = "The red line is 50% of 1/5 of food MEB; double-click on legend to select",
showarrow = F, xref='paper', yref='paper',
xanchor='right', yanchor='auto', xshift=0, yshift=0,
font=list(size=8)),
legend = list(font = list(size = 7)))
ggplotly(food_dist_range, tooltip = c("text"), width = 820, height =  700) %>%
layout(title = list(text = paste0("Range of USD values per person by state in 2022/Q1")),
margin = list(b=160), ##bottom margin in pixels
annotations = list(x = 0.5, y = -1, #position of text adjust as needed
text = "The red line is 50% of 1/5 of food MEB; double-click on legend to select",
showarrow = F, xref='paper', yref='paper',
xanchor='right', yanchor='auto', xshift=0, yshift=0,
font=list(size=8)),
legend = list(font = list(size = 7)))
ggplotly(food_dist_range, tooltip = c("text"), width = 820, height =  700) %>%
layout(title = list(text = paste0("Range of USD values per person by state in 2022/Q1")),
margin = list(b=160), ##bottom margin in pixels
annotations = list(x = 0, y = -1, #position of text adjust as needed
text = "The red line is 50% of 1/5 of food MEB; double-click on legend to select",
showarrow = F, xref='paper', yref='paper',
xanchor='right', yanchor='auto', xshift=0, yshift=0,
font=list(size=8)),
legend = list(font = list(size = 7)))
ggplotly(food_dist_range, tooltip = c("text"), width = 820, height =  700) %>%
layout(title = list(text = paste0("Range of USD values per person by state in 2022/Q1")),
margin = list(b=160), ##bottom margin in pixels
annotations = list(x = 0, y = 1, #position of text adjust as needed
text = "The red line is 50% of 1/5 of food MEB; double-click on legend to select",
showarrow = F, xref='paper', yref='paper',
xanchor='right', yanchor='auto', xshift=0, yshift=0,
font=list(size=8)),
legend = list(font = list(size = 7)))
ggplotly(food_dist_range, tooltip = c("text"), width = 820, height =  700) %>%
layout(title = list(text = paste0("Range of USD values per person by state in 2022/Q1")),
xaxis = list(title = "USD value per person <br> the red line is 50% of 1/5 of the food MEB"),
legend = list(font = list(size = 7)))
food_dist_range <- fsc_nw %>%
filter(!is.na(usd_per_person)) %>%
# filtering out outliers, you might want to filter out multi-purpose cash transfers also
# since there was only one distribution
filter(activity_red != "multi-purpose cash transfer" & usd_per_person < 60) %>%
ggplot(aes(x = usd_per_person, y = state, colour = state,
text = paste0(org_code, "\n",
activity_red, "\n",
"ben. frequencies: ", comma(beneficiaries, accuracy = 1), "\n",
"USD per person: ", dollar(usd_per_person), "\n",
"total value: ", dollar(total_value_usd, accuracy = 1), "\n",
township, ", ", state))) +
geom_vline(xintercept = 11.455, lty = 2, colour = "red", alpha = .5, size = .3) +
geom_jitter(alpha = 0.3, aes(size = beneficiaries)) +
scale_colour_viridis_d() +
scale_size_continuous(range = c(0.3, 10)) +
scale_x_continuous(breaks = seq(0, 90, by = 10), labels = dollar_format(accuracy = 1)) +
labs(x = "",
y = "",
title = "Range of USD values per person by state in 2022/Q1",
size = "", colour = "") +
facet_wrap(~activity_red, ncol = 1)
ggplotly(food_dist_range, tooltip = c("text"), width = 820, height =  700) %>%
layout(title = list(text = paste0("Range of USD values per person by state in 2022/Q1")),
xaxis = list(title = "USD value per person <br> the red line is 50% of 1/5 of the food MEB",
font = list(size = 8)),
legend = list(font = list(size = 7)))
ggplotly(food_dist_range, tooltip = c("text"), width = 820, height =  700) %>%
layout(title = list(text = paste0("Range of USD values per person by state in 2022/Q1")),
xaxis = list(title = "USD value per person <br> The red line is 50% of 1/5 of the food MEB",
font = list(size = 5)),
legend = list(font = list(size = 7)))
ggplotly(food_dist_range, tooltip = c("text"), width = 820, height =  700) %>%
layout(title = list(text = paste0("Range of USD values per person by state in 2022/Q1")),
xaxis = list(title = "USD value per person <br> The red line is 50% of 1/5 of the food MEB",
titlefont = list(size = 7)),
legend = list(font = list(size = 7)))
ggplotly(food_dist_range, tooltip = c("text"), width = 820, height =  700) %>%
layout(title = list(text = paste0("Range of USD values per person by state in 2022/Q1")),
xaxis = list(title = "USD value per person <br> The red line is 50% of 1/5 of the food MEB",
titlefont = list(size = 10)),
legend = list(font = list(size = 7)))
ggplotly(food_dist_range, tooltip = c("text"), width = 820, height =  700) %>%
layout(title = list(text = paste0("Range of USD values per person by state in 2022/Q1")),
xaxis = list(title = "USD value per person <br> The red line is 50% of 1/5 of the food MEB",
titlefont = list(size = 11)),
legend = list(font = list(size = 7)))
